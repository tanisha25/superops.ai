package com.springboot.user.service.impl;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;

import com.springboot.user.entity.Movie;
import com.springboot.user.entity.Screening;
import com.springboot.user.entity.Seats;
import com.springboot.user.entity.Theatre;
import com.springboot.user.entity.User;
import com.springboot.user.repo.MovieRepository;
import com.springboot.user.repo.SeatsRepository;
import com.springboot.user.repo.TheatreRepository;
import com.springboot.user.repo.UserRepository;
import com.springboot.user.service.SeatsService;
import com.springboot.user.utils.Constants;
import com.springboot.user.utils.Utils;

public class SeatsServiceImpl implements SeatsService{

	@Autowired
	private TheatreRepository theatreRepository;
	
	@Autowired
	private UserRepository userRepository;
	
	@Autowired
	private MovieRepository movieRepository;
	
	@Autowired
	private SeatsRepository seatsRepository;
	@Override
	public void bookSeats(String theatreName, String movieName, String userName, int noOfSeats,int[] seats) throws Exception {
		Theatre theatre = theatreRepository.findByName(theatreName);
		if(Utils.isEmpty(theatre))
		{
			throw new Exception(Constants.NO_THEATRE_FOUND);
		}
		User user = userRepository.findByName(userName);
		if(Utils.isEmpty(user))
		{
			throw new Exception(Constants.NO_USER_FOUND);
		}
		Movie movie = movieRepository.findByName(movieName);
		if(!Utils.isEmpty(movieName))
		{
			throw new Exception(Constants.NO_MOVIE_FOUND);
		}
		Optional<Screening> screen = theatre.getScreenings().stream().filter(t -> !Utils.isEmpty(t.getMovie())
				                                 && movie.getId().equals(t.getMovie().getId())).findAny();
		if(!screen.isPresent())
		{
			throw new Exception(Constants.NO_MOVIE_FOUND_IN_THEATRE);
		}
		else {
			if(noOfSeats > Constants.MAX_NO_OF_SEATS_BOOKED)
				throw new Exception(Constants.MAX_SEAT_MESSAGE);
			
			List<Seats> seatList = new ArrayList<>(noOfSeats);
			for(int i=0;i<noOfSeats;i++) {
				
				Seats s = new Seats();
				s.setScreening(screen.get());
				//getpayment
				seatList.add(s);
			}
			if(!Utils.isEmpty(seatList))
				seatsRepository.saveAll(seatList);
		}
	}
	
	

}
